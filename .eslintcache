[{"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\index.tsx":"1","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\reportWebVitals.ts":"2","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\App.tsx":"3","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\home.tsx":"4","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\diary.tsx":"5","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\entry.tsx":"6","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\users.tsx":"7","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\mirage\\server.ts":"8","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\store\\store.ts":"9","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\auth\\userSlice.ts":"10","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\mirage\\routes\\user.ts":"11","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\api.ts":"12","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\auth\\signup\\signup.tsx":"13","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\auth\\authSlice.ts":"14","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\rootReducer.ts":"15","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\mirage\\routes\\diary.ts":"16","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\diary\\diarySlice.ts":"17","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\diaryTile.tsx":"18","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\interfaces\\interfaces.ts":"19","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\entry\\editor.ts":"20","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\entry\\entry.ts":"21","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\entry\\entryshow.ts":"22"},{"size":746,"mtime":1608194476526,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1606701893145,"results":"25","hashOfConfig":"24"},{"size":770,"mtime":1608972366428,"results":"26","hashOfConfig":"24"},{"size":1419,"mtime":1609428349187,"results":"27","hashOfConfig":"24"},{"size":3594,"mtime":1609674307743,"results":"28","hashOfConfig":"24"},{"size":5683,"mtime":1609700029178,"results":"29","hashOfConfig":"24"},{"size":4205,"mtime":1609700575531,"results":"30","hashOfConfig":"24"},{"size":1498,"mtime":1609247040812,"results":"31","hashOfConfig":"24"},{"size":347,"mtime":1608459501706,"results":"32","hashOfConfig":"24"},{"size":453,"mtime":1608472951155,"results":"33","hashOfConfig":"24"},{"size":1084,"mtime":1609602253105,"results":"34","hashOfConfig":"24"},{"size":958,"mtime":1608365731758,"results":"35","hashOfConfig":"24"},{"size":7280,"mtime":1608478334266,"results":"36","hashOfConfig":"24"},{"size":790,"mtime":1608983730486,"results":"37","hashOfConfig":"24"},{"size":712,"mtime":1609610481623,"results":"38","hashOfConfig":"24"},{"size":2943,"mtime":1609251566576,"results":"39","hashOfConfig":"24"},{"size":839,"mtime":1609609994080,"results":"40","hashOfConfig":"24"},{"size":5144,"mtime":1609702183248,"results":"41","hashOfConfig":"24"},{"size":351,"mtime":1608625723378,"results":"42","hashOfConfig":"24"},{"size":954,"mtime":1609243800461,"results":"43","hashOfConfig":"24"},{"size":704,"mtime":1609245067028,"results":"44","hashOfConfig":"24"},{"size":408,"mtime":1609610946435,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"e354sb",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\index.tsx",[],["99","100"],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\reportWebVitals.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\App.tsx",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\home.tsx",["101","102","103","104"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Diaries from './diary';\r\nimport EntryEditor from './entry';\r\nimport Users from './users';\r\n\r\nimport {\r\n  Grid,\r\n  Hidden,\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n    padding : 0,\r\n    display: \"flex\",\r\n    background: \"linear-gradient(90deg, #1a237e , #b2ebf2)\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  container: {\r\n    borderStyle: \"solid\",\r\n    width : '100%',\r\n    borderRadius: 10,\r\n    borderColor: '#1a237e',\r\n    borderWidth: 4,\r\n    padding : 2.5,\r\n    margin: 1,\r\n    height: \"95vh\",\r\n    background : '#fafafa',\r\n  },\r\n}));\r\n\r\nexport default function Home() {\r\n  const classes = useStyle();\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Grid item md={3} container alignItems=\"center\">\r\n          <Box className={classes.container}>\r\n            <Diaries/>   \r\n                     \r\n          </Box>\r\n        </Grid>\r\n        <Grid item md={6} container alignItems=\"center\">\r\n          <Box className={classes.container}>\r\n            <EntryEditor/>\r\n          </Box>\r\n        </Grid>\r\n        <Grid item md={3} container alignItems=\"center\">\r\n          <Box className={classes.container}>\r\n            <Users/>\r\n          </Box>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\diary.tsx",["105"],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\entry.tsx",["106","107","108","109","110"],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\users.tsx",["111","112","113","114","115","116"],"import React, { useEffect, useState } from \"react\";\r\nimport { IconButton, makeStyles } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Entry, User } from \"../../interfaces/interfaces\";\r\nimport { RootState } from \"../../rootReducer\";\r\nimport dayjs from \"dayjs\";\r\nimport { useAppDispatch } from \"../../store/store\";\r\nimport { setEntry } from \"../../features/entry/entry\";\r\nimport http from \"../../services/api\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport {\r\n  Grid,\r\n  Hidden,\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  Divider,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { setCanEdit, setCurrentlyEditing } from \"../../features/entry/editor\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    background: \"#fff\",\r\n  },\r\n  createButton: {\r\n    width: \"100%\",\r\n    color: \"#000\",\r\n    background: \"#b0bec5\",\r\n  },\r\n\r\n  list: {\r\n    width: \"100%\",\r\n    maxWidth: \"36ch\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n\r\n  entryList : {\r\n\r\n    height : 350,\r\n    overflowY  : 'scroll',\r\n    \"&::-webkit-scrollbar\": {\r\n      width: \"0.2em\",\r\n    },\r\n    \"&::-webkit-scrollbar-track\": {\r\n      boxShadow: \"inset 0 0 10px rgba(0,0,0,0.00)\",\r\n      webkitBoxShadow: \"inset 0 0 6px rgba(0,0,0,0.00)\",\r\n    },\r\n    \"&::-webkit-scrollbar-thumb\": {\r\n      backgroundColor: \"rgba(0,0,0,.1)\",\r\n      outline: \"1px solid slategrey\",\r\n    },\r\n\r\n  }\r\n}));\r\n\r\nexport default function Users() {\r\n  const classes = useStyle();\r\n  const dispatch = useAppDispatch();\r\n  const { entriesShow } = useSelector((state: RootState) => state);\r\n  const { entries } = useSelector((state: RootState) => state);\r\n  const { user }: any = useSelector((state: User) => state);\r\n  const id = entriesShow;\r\n\r\n  const showEntries = () => {\r\n    if (entries && id != null) {\r\n      http\r\n        .get<null, { entries: Entry[] }>(`/diaries/entries/${id}`)\r\n        .then(({ entries: _entries }) => {\r\n          if (_entries) {\r\n            const sortByLastUpdated = _entries.sort((a, b) => {\r\n              return dayjs(b.updatedAt).unix() - dayjs(a.updatedAt).unix();\r\n            });\r\n            dispatch(setEntry(sortByLastUpdated));\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  console.log(entries);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid>\r\n        <Box>\r\n          <List className={classes.root}>\r\n            <ListItem alignItems=\"flex-start\">\r\n              <ListItemAvatar>\r\n                <Avatar alt={user.username} src=\"/static/images/avatar/1.jpg\" />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={user.username}\r\n                secondary={\r\n                  <React.Fragment>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body2\"\r\n                      className={classes.inline}\r\n                      color=\"textPrimary\"\r\n                    >\r\n                      {user.email}\r\n                    </Typography>\r\n                    {\" — I'll be in your neighborhood doing errands this…\"}\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n            </ListItem>\r\n            <Divider component=\"li\" />\r\n          </List>\r\n        </Box>\r\n        <Box>\r\n          <Button\r\n            className={classes.createButton}\r\n            variant=\"outlined\"\r\n            onClick={showEntries}\r\n          >\r\n            show entries\r\n          </Button>\r\n          <List  className = {classes.entryList}>\r\n            {entries.map((entry, index) => (\r\n              <React.Fragment key={index}>\r\n                \r\n                <ListItem button onClick={() => {\r\n                dispatch(setCurrentlyEditing(entry));\r\n                dispatch( setCanEdit(false));\r\n              \r\n              }}>\r\n                  <ListItemText primary={entry.title} />\r\n\r\n                 \r\n                </ListItem>\r\n\r\n                <Divider component=\"li\" />\r\n              </React.Fragment>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\mirage\\server.ts",["117"],"import {\r\n  Server,\r\n  Model,\r\n  Factory,\r\n  belongsTo,\r\n  hasMany,\r\n  Response,\r\n  Request,\r\n} from \"miragejs\";\r\nimport user from \"./routes/user\";\r\nimport * as diary from \"./routes/diary\";\r\n\r\nexport const handleError = (error: any, message = \"an error message\") => {\r\n  return new Response(400, undefined, {\r\n    data: {\r\n      message,\r\n      isError: true,\r\n    },\r\n  });\r\n};\r\n\r\nexport const setupServer = (env?: string): Server => {\r\n  return new Server({\r\n    environment: env ?? \"development\",\r\n\r\n    models: {\r\n      entry: Model.extend({\r\n        diary: belongsTo(),\r\n      }),\r\n      diary: Model.extend({\r\n        entry: hasMany(),\r\n        user: belongsTo(),\r\n      }),\r\n      user: Model.extend({\r\n        diary: hasMany(),\r\n      }),\r\n    },\r\n\r\n    factories: {\r\n      user: Factory.extend({\r\n        username: \"hamid\",\r\n        password: \"123\",\r\n        email: \"hamid@gmail.com\",\r\n      }),\r\n    },\r\n\r\n    seeds: (server): any => {\r\n      server.create(\"user\");\r\n    },\r\n\r\n    routes(): void {\r\n      this.urlPrefix = \"https://diaries.app\";\r\n\r\n      this.post(\"/auth/signup\", user.signup);\r\n      this.post(\"/auth/signin\", user.signin);\r\n\r\n      this.post(\"/diaries/\", diary.create);\r\n      this.post(\"/diaries/entry/:id\", diary.addEntry);\r\n\r\n      this.get(\"/diaries/:id\", diary.getDiaries);\r\n      this.get(\"/diaries/entries/:id\", diary.getEntries);\r\n\r\n      this.put(\"/diaries/:id\", diary.updateDiary);\r\n      this.put(\"/diaries/entry/:id\", diary.updateEntry);\r\n    },\r\n  });\r\n};\r\n","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\store\\store.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\auth\\userSlice.ts",["118"],"import {createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport {User} from '../../interfaces/interfaces';\r\n\r\n\r\n\r\n\r\nconst user = createSlice({\r\n\r\n    name  : 'user',\r\n    initialState : null as User |  null,\r\n\r\n    reducers : {\r\n\r\n        setUser(state,{payload}) {\r\n\r\n            return state = ( payload !== null)? payload : null\r\n        },\r\n        \r\n    }\r\n\r\n\r\n});\r\n\r\nexport const {setUser} = user.actions;\r\nexport default user.reducer;\r\n\r\n\r\n","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\mirage\\routes\\user.ts",["119"],"import { Request, Response } from \"miragejs\";\r\nimport { handleError } from \"./../server\";\r\nimport { User } from \"./../../../interfaces/interfaces\";\r\nimport { randomBytes } from \"crypto\";\r\n\r\nconst generateToken = () => randomBytes(8).toString(\"hex\");\r\n\r\nexport interface AuthResponse {\r\n  token: string;\r\n  user: User;\r\n};\r\n\r\nconst signin = (schema : any , req : Request)  : AuthResponse | Response => {\r\n\r\n  const {username , password} = JSON.parse( req.requestBody);\r\n  const user = schema.users.findBy({username});\r\n  const token = generateToken();\r\n  \r\n\r\n  if (!user){\r\n    return handleError( null , 'No user with that username exists')\r\n  }\r\n\r\n  if (password !== user.password){\r\n    return handleError (null, 'Password is incorrect');\r\n  }\r\n\r\n  return {\r\n    user,\r\n    token \r\n  }\r\n  \r\n\r\n};\r\n\r\nconst signup = (schema: any, req: Request): AuthResponse | Response => {\r\n  const data = JSON.parse(req.requestBody);\r\n  const user = schema.users.create(data);\r\n\r\n  const token = generateToken();\r\n\r\n  return {\r\n    user,\r\n    token,\r\n  };\r\n};\r\n\r\nexport default { signup, signin };\r\n","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\api.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\auth\\signup\\signup.tsx",["120","121"],"import React, { useState, FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useForm ,  Controller } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers\";\r\nimport { User } from \"../../../interfaces/interfaces\";\r\nimport { AuthResponse } from \"../../../services/mirage/routes/user\";\r\nimport http from \"../../../services/api\";\r\nimport {useAppDispatch} from '../../../store/store';\r\nimport { saveToken, setAuthState} from '../../../features/auth/authSlice';\r\nimport { setUser } from '../../../features/auth/userSlice';\r\n\r\n\r\nimport {\r\n  Grid,\r\n  Hidden,\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n    display: \"flex\",\r\n    background: \"linear-gradient(90deg, #1a237e , #b2ebf2)\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  signup: {\r\n    borderStyle: \"solid\",\r\n    borderRadius: 10,\r\n    borderColor: \"#263238\",  \r\n    borderWidth: 2,\r\n    padding: 20,\r\n    margin: 10,\r\n    background :' #ffff',\r\n  },\r\n}));\r\n\r\n\r\nconst schema = Yup.object().shape({\r\n  username: Yup.string()\r\n    .required(\"What? No username?\")\r\n    .max(16, \"Username cannot be longer than 16 characters\"),\r\n  password: Yup.string().required('Without a password, \"None shall pass!\"'),\r\n  email: Yup.string().email(\"Please provide a valid email address (abc@xy.z)\"),\r\n});\r\n\r\nfunction Auth () {\r\n\r\n  const classes = useStyle();\r\n  const [ isSignin , setIsSignin] = useState( true);\r\n  const dispatch = useAppDispatch();\r\n  \r\n\r\n  const {handleSubmit, errors, control } = useForm<User>({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const submitForm = (data : User) => {\r\n    const path =  isSignin? \"/auth/signin\" : '/auth/signup';\r\n\r\n    http.post<User, AuthResponse >( path , data).then( (res) => {\r\n      if(res){\r\n        const {user,token} = res;        \r\n        dispatch (setUser(user)); \r\n        dispatch (saveToken(token));\r\n        dispatch (setAuthState(true) )      \r\n\r\n      }\r\n    }).catch ( err=> console.log(err))\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Grid container alignItems=\"center\" justify=\"center\">\r\n          <Hidden mdUp>\r\n            <Grid item sm={12} container alignItems=\"center\" justify=\"center\">\r\n              <Box px={3}>\r\n                <Box style={{ color: \"#ffd600\" }} py={2}>\r\n                  <Typography variant=\"h3\">Diary App</Typography>\r\n                  <Typography variant=\"h6\">Manage your activities</Typography>\r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n          </Hidden>\r\n          <Hidden smDown>\r\n            <Grid item md={6} container alignItems=\"center\">\r\n              <Box px={10} style={{ color: \"#ffd600\" }}>\r\n                <Box py={2}>\r\n                  <Typography variant=\"h2\">Diary App</Typography>\r\n                </Box>\r\n                <Box>\r\n                  <Typography style={{ fontWeight: 5, fontSize: 20 }}>\r\n                    Keeping a diary is important for some people, for many\r\n                    different reasons. Traditionally, people would just write\r\n                    their thoughts in a small book, and then store it away in a\r\n                    safe place. Diary app allows people to keep diaries on a\r\n                    computer.\r\n                  </Typography>\r\n                </Box>\r\n                <Box>\r\n                  \r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      style={{ marginTop: 25, color: \"#ffd600\" }}\r\n                      onClick = { ()=> setIsSignin(!isSignin)}\r\n                    >\r\n                      {isSignin ? 'signup' :'signin'}\r\n                    </Button>\r\n                 \r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n          </Hidden>\r\n          <Grid item md={6} container alignItems=\"center\" justify=\"center\">\r\n            <Box px={5} className={classes.signup}>\r\n              <Box py={2} style={{ color: \"#263238\" }}>\r\n                <Typography variant=\"h4\">{isSignin ? 'sigin' :'signup'}</Typography>\r\n              </Box>\r\n              <Box>\r\n                <form onSubmit = { handleSubmit(submitForm)}>\r\n                  <Box my = {2}>\r\n                  <Controller\r\n                        as={<TextField id=\"standard-full-width\"  fullWidth />}\r\n                        name=\"username\"\r\n                        fullWidth\r\n                        label=\"Username\"\r\n                        size=\"small\"                       \r\n                        variant=\"outlined\"\r\n                        helperText={errors.username?.message}\r\n                        error={errors && errors.username && true}\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                      />\r\n                  </Box>\r\n                  <Box>\r\n                  <Controller\r\n                        as={<TextField />}\r\n                        name=\"password\"\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        size=\"small\"                       \r\n                        variant=\"outlined\"\r\n                        type=\"password\"\r\n                        helperText={errors.password?.message}\r\n                        error={errors && errors.password && true}\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                      />\r\n                  </Box>\r\n\r\n                  <Box my = {2} >\r\n                  <Controller\r\n                        as={<TextField />}\r\n                        name=\"email\"\r\n                        fullWidth\r\n                        label=\"Email\"\r\n                        size=\"small\"                       \r\n                        variant=\"outlined\"\r\n                        helperText={errors.email?.message}\r\n                        error={errors && errors.email && true}\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                      />\r\n                  </Box>\r\n\r\n                  <Box py={1}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      disableElevation\r\n                      style={{ color: \"#060c21\", marginTop: 30 }}\r\n                      type=\"submit\"\r\n                    >\r\n                     {isSignin ? 'sigin' :'signup'}\r\n                    </Button>\r\n\r\n                    <Hidden mdUp>                      \r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          style={{\r\n                            color: \"#060c21\",\r\n                            marginTop: 30,\r\n                            marginLeft: 32,\r\n                          }}      \r\n                          onClick = { ()=> setIsSignin(!isSignin)}\r\n                        >\r\n                          {isSignin ? 'signup' :'signin'}\r\n\r\n                        </Button>\r\n                     \r\n                    </Hidden>\r\n                  </Box>\r\n                </form>\r\n              </Box>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\auth\\authSlice.ts",["122"],"import { createSlice} from '@reduxjs/toolkit';\r\n\r\ninterface AuthState {\r\n\r\n    token : string | null,\r\n    isAuthenticated : boolean \r\n}\r\n\r\n\r\nconst auth = createSlice({\r\n    name : 'auth',\r\n\r\n    initialState : <AuthState> {\r\n    token : null,\r\n    isAuthenticated : false\r\n    },\r\n\r\n    reducers : {\r\n\r\n        saveToken( state, {payload}) {\r\n            if(payload) {\r\n\r\n                state.token = payload\r\n            }\r\n        },\r\n\r\n        clearToken (state){\r\n\r\n            state.token = null\r\n        },\r\n\r\n        setAuthState ( state , {payload}){\r\n\r\n            if(payload){\r\n\r\n                state.isAuthenticated = payload\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n});\r\n\r\nexport const { saveToken , clearToken , setAuthState} = auth.actions;\r\n\r\nexport default auth.reducer;\r\n\r\n","E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\rootReducer.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\services\\mirage\\routes\\diary.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\diary\\diarySlice.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\components\\home\\diaryTile.tsx",["123","124","125","126","127","128"],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\interfaces\\interfaces.ts",[],["129","130"],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\entry\\editor.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\entry\\entry.ts",[],"E:\\react\\bootcamp\\diaries_app_reduxtoolkit\\src\\features\\entry\\entryshow.ts",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":9,"column":3,"nodeType":"137","messageId":"138","endLine":9,"endColumn":9},{"ruleId":"135","severity":1,"message":"139","line":11,"column":3,"nodeType":"137","messageId":"138","endLine":11,"endColumn":9},{"ruleId":"135","severity":1,"message":"140","line":12,"column":3,"nodeType":"137","messageId":"138","endLine":12,"endColumn":12},{"ruleId":"135","severity":1,"message":"141","line":13,"column":3,"nodeType":"137","messageId":"138","endLine":13,"endColumn":13},{"ruleId":"135","severity":1,"message":"142","line":97,"column":28,"nodeType":"137","messageId":"138","endLine":97,"endColumn":33},{"ruleId":"135","severity":1,"message":"143","line":2,"column":16,"nodeType":"137","messageId":"138","endLine":2,"endColumn":26},{"ruleId":"135","severity":1,"message":"136","line":8,"column":3,"nodeType":"137","messageId":"138","endLine":8,"endColumn":9},{"ruleId":"135","severity":1,"message":"144","line":12,"column":3,"nodeType":"137","messageId":"138","endLine":12,"endColumn":10},{"ruleId":"135","severity":1,"message":"145","line":23,"column":8,"nodeType":"137","messageId":"138","endLine":23,"endColumn":16},{"ruleId":"135","severity":1,"message":"146","line":62,"column":11,"nodeType":"137","messageId":"138","endLine":62,"endColumn":17},{"ruleId":"135","severity":1,"message":"147","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"148","line":1,"column":28,"nodeType":"137","messageId":"138","endLine":1,"endColumn":36},{"ruleId":"135","severity":1,"message":"143","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":20},{"ruleId":"135","severity":1,"message":"145","line":10,"column":8,"nodeType":"137","messageId":"138","endLine":10,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":14,"column":3,"nodeType":"137","messageId":"138","endLine":14,"endColumn":9},{"ruleId":"135","severity":1,"message":"140","line":23,"column":3,"nodeType":"137","messageId":"138","endLine":23,"endColumn":12},{"ruleId":"135","severity":1,"message":"149","line":8,"column":3,"nodeType":"137","messageId":"138","endLine":8,"endColumn":10},{"ruleId":"135","severity":1,"message":"150","line":1,"column":22,"nodeType":"137","messageId":"138","endLine":1,"endColumn":35},{"ruleId":"151","severity":1,"message":"152","line":48,"column":1,"nodeType":"153","endLine":48,"endColumn":35},{"ruleId":"135","severity":1,"message":"154","line":1,"column":27,"nodeType":"137","messageId":"138","endLine":1,"endColumn":29},{"ruleId":"135","severity":1,"message":"155","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":13,"column":20,"nodeType":"158","messageId":"159","endLine":16,"endColumn":6},{"ruleId":"135","severity":1,"message":"160","line":2,"column":17,"nodeType":"137","messageId":"138","endLine":2,"endColumn":21},{"ruleId":"135","severity":1,"message":"161","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":22},{"ruleId":"135","severity":1,"message":"162","line":12,"column":8,"nodeType":"137","messageId":"138","endLine":12,"endColumn":18},{"ruleId":"135","severity":1,"message":"163","line":17,"column":8,"nodeType":"137","messageId":"138","endLine":17,"endColumn":13},{"ruleId":"135","severity":1,"message":"146","line":83,"column":11,"nodeType":"137","messageId":"138","endLine":83,"endColumn":17},{"ruleId":"135","severity":1,"message":"164","line":84,"column":9,"nodeType":"137","messageId":"138","endLine":84,"endColumn":21},{"ruleId":"131","replacedBy":"165"},{"ruleId":"133","replacedBy":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"@typescript-eslint/no-unused-vars","'Hidden' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'TextField' is defined but never used.","'Typography' is defined but never used.","'_user' is assigned a value but never used.","'IconButton' is defined but never used.","'Divider' is defined but never used.","'EditIcon' is defined but never used.","'editor' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Request' is defined but never used.","'PayloadAction' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'FC' is defined but never used.","'Link' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as AuthState' instead of '<AuthState>'.","TSTypeAssertion","as","'User' is defined but never used.","'CardActionArea' is defined but never used.","'DeleteIcon' is defined but never used.","'dayjs' is defined but never used.","'totalEntries' is assigned a value but never used.",["167"],["168"],"no-global-assign","no-unsafe-negation"]